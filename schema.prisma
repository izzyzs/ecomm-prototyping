// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    output   = "../generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Product {
    id          Int      @id @default(autoincrement())
    description String
    barcode     String   @unique
    category    String
    price       Float
    inventory   Int      @default(0)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    orderProducts OrderProduct[]
    CartItem      CartItem[]
}

model Order {
    id          Int         @id @default(autoincrement())
    user_id     Int
    date        DateTime
    fulfillment Fulfillment @default(PU)
    status      Status
    pickup_time DateTime?
    employee_id Int? // Nullable â€“ only assigned when picked up
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    user          User           @relation(fields: [user_id], references: [id])
    employee      Employee?      @relation(fields: [employee_id], references: [id])
    orderProducts OrderProduct[]
    Address       Address[]
}

enum Fulfillment {
    NDD
    SDD
    PU
}

enum Status {
    CANCELLED
    PLACED
    READY_FOR_PICKUP
    ON_ROUTE
    COMPLETE
}

model Address {
    id     Int     @id @default(autoincrement())
    userId Int
    street String
    city   String
    state  String
    zip    String
    order  Order[]
}

model OrderProduct {
    order_id   Int
    product_id Int
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    product    Product  @relation(fields: [product_id], references: [id])
    order      Order    @relation(fields: [order_id], references: [id])

    @@id([order_id, product_id])
}

model User {
    id           Int     @id @default(autoincrement())
    first_name   String
    last_name    String
    professional Boolean @default(false)
    email        String  @unique
    cart         Cart?
    order        Order[]
}

model Employee {
    id       Int     @id @default(autoincrement())
    username String  @unique
    password String
    role     Role
    Order    Order[]
}

enum Role {
    ADMIN
    DRIVER
    FLOOR
}

model Cart {
    id        Int        @id @default(autoincrement())
    userId    Int        @unique
    updatedAt DateTime   @updatedAt
    items     CartItem[]
    user      User       @relation(fields: [userId], references: [id])
}

model CartItem {
    id        Int     @id @default(autoincrement())
    cartId    Int
    productId Int
    quantity  Int
    cart      Cart    @relation(fields: [cartId], references: [id])
    product   Product @relation(fields: [productId], references: [id])
}
